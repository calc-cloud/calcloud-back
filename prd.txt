Backend PRD: Procurement Management System

Objective:
Build a clean, efficient, and maintainable backend for the Procurement Management System using FastAPI. The backend must support full CRUD functionality for Purposes, EMFs, Costs, and Hierarchy entities, support advanced filtering, searching, and be easy to deploy and extend.

Technology Stack:
- Language: Python 3.11+
- Framework: FastAPI
- ORM: SQLAlchemy (v2 mode)
- Migrations: Alembic
- Database: PostgreSQL
- Testing: Pytest
- Deployment: Docker with .env config

Data Models:

1. Purpose
- ID (Primary Key, auto-generated integer)
- Hierarchy ID (Optional ForeignKey to Hierarchy, nullable)
- Expected Delivery: Date (nullable)
- Last Modified: DateTime (auto-updated)
- Comments: String (max 1000 chars, nullable)
- Status: Enum (IN_PROGRESS, COMPLETED, SIGNED, PARTIALLY_SUPPLIED)
- Creation Time: DateTime (auto-generated)
- Supplier: String (max 200 chars, nullable)
- EMFs: List of EMF objects (One-to-Many relationship)
- Content: String (max 2000 chars, nullable)
- Description: String (max 2000 chars, nullable)
- Service Type: String (max 100 chars, nullable)

2. EMF (Procurement Form)
- ID (Primary Key, auto-generated integer)
- EMF ID: String (unique identifier, max 255 chars)
- Purpose ID: ForeignKey to Purpose
- Creation Time: DateTime (auto-generated)
- Order ID: String (max 255 chars, nullable)
- Order Creation Date: Date (nullable)
- Demand ID: String (max 255 chars, nullable)
- Demand Creation Date: Date (nullable)
- Bikushit ID: String (max 255 chars, nullable)
- Bikushit Creation Date: Date (nullable)
- Costs: List of Cost objects (One-to-Many, integrated within EMF operations)

3. Cost (Integrated within EMF)
- ID (Primary Key, auto-generated integer)
- EMF ID: ForeignKey to EMF
- Currency: Enum (ILS, USD, EUR)
- Cost: Float (>= 0)
Note: Costs are managed directly through EMF operations, not as separate endpoints

4. Hierarchy (Organizational Structure)
- ID (Primary Key, auto-generated integer)
- Parent ID: Optional FK to Hierarchy (self-referencing, nullable)
- Type: Enum (UNIT, CENTER, ANAF, MADOR, TEAM)
- Name: String (max 200 chars, required)

API Endpoints:

/purposes
- GET: list purposes (supports pagination, filtering, sorting, search)
  - Filters:
    - hierarchy_id
    - emf_id
    - supplier
    - service_type
    - status
  - Searchable by:
    - description
    - content
    - emf_id
  - Sortable by:
    - creation_time
    - last_modified
    - expected_delivery
- POST: create a new purpose
- GET /{id}: retrieve full purpose with nested EMFs and their costs
- PUT /{id}: update purpose data
- DELETE /{id}: delete purpose and cascade delete children (EMFs and costs)

/emfs (Integrated Cost Management)
- POST /purposes/{id}/emfs: add EMF to a purpose with optional costs list
  - Request body can include "costs" array with currency and cost values
- PUT /emfs/{id}: update EMF data including costs
  - Can update EMF fields and replace/update the entire costs list
  - Costs are managed as part of EMF operations (no separate endpoints)
- DELETE /emfs/{id}: delete EMF and cascade delete associated costs

Cost Management:
- Costs are managed exclusively through EMF operations
- Create costs: include in EMF creation request
- Update costs: include in EMF update request  
- Delete costs: handled automatically when EMF is deleted or costs list is updated
- No separate /costs endpoints - all cost operations go through /emfs

/hierarchies
- GET: get full hierarchy tree structure
- POST: add a new hierarchy node
- PUT /{id}: edit hierarchy node (name, type, parent)
- DELETE /{id}: remove node (only if no children and not used in purposes)

/files (optional)
- POST /purposes/{id}/files: upload file
- GET /purposes/{id}/files: list files
- DELETE /files/{file_id}: delete file

Security (optional):
- API key or JWT auth
- Role-based permissions (admin, editor, viewer)

Request/Response Schema Examples:

1. Purpose Creation:
POST /purposes
{
  "hierarchy_id": 1,
  "expected_delivery": "2024-12-31",
  "comments": "Urgent procurement",
  "status": "IN_PROGRESS",
  "supplier": "Tech Corp",
  "content": "Software licenses",
  "description": "Annual software license renewal",
  "service_type": "Software"
}

2. EMF Creation with Costs:
POST /purposes/1/emfs
{
  "emf_id": "EMF-2024-001",
  "order_id": "ORD-001",
  "order_creation_date": "2024-01-15",
  "demand_id": "DEM-001", 
  "demand_creation_date": "2024-01-10",
  "costs": [
    {"currency": "ILS", "amount": 5000.00},
    {"currency": "USD", "amount": 1500.00}
  ]
}

3. EMF Update with Cost Changes:
PUT /emfs/1
{
  "order_id": "ORD-002",
  "costs": [
    {"currency": "EUR", "amount": 1200.00}
  ]
}

4. Hierarchy Creation:
POST /hierarchies
{
  "type": "UNIT",
  "name": "IT Department",
  "parent_id": 1
}

Testing:
- Pytest for unit and integration tests
- SQLite test DB or Docker test containers
- Test CRUD flows and filtering logic
- Test cost integration within EMF operations
- Test cascade delete operations

Deployment:
- Dockerized app
- Environment-based configuration using .env
- Use Gunicorn/Uvicorn for production

