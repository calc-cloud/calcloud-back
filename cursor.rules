# Cursor Rules for Calculaud Backend - Procurement Management System

## Project Context
This is a FastAPI-based backend for a Procurement Management System that manages Purposes, EMFs (procurement forms), Costs, and Hierarchies. The system handles Israeli procurement workflows with multi-currency support (ILS, USD, EUR).

## Technology Stack
- **Python 3.11+** with modern typing (use `str | None` not `Optional[str]`)
- **FastAPI** with Pydantic v2 and Annotated syntax
- **SQLAlchemy v2** with Mapped/mapped_column
- **PostgreSQL** (SQLite for development)
- **Alembic** for migrations
- **Pytest** for testing
- **Black, isort, flake8** for code quality

## Code Style & Quality Standards

### Python Typing (Modern Syntax Only)
```python
# ✅ Use modern syntax
list[str]           # not List[str]
dict[str, int]      # not Dict[str, int]
str | None          # not Optional[str]
int | str | None    # not Union[int, str, None]

# ✅ Use Annotated for Pydantic fields
field: Annotated[str, Field(min_length=1, max_length=100)]
nullable_field: Annotated[str | None, Field(default=None)]
```

### SQLAlchemy v2 Patterns
```python
# ✅ Use Mapped and mapped_column
id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
name: Mapped[str] = mapped_column(String(100), nullable=False)
nullable_field: Mapped[str | None] = mapped_column(String(100), nullable=True)
created_at: Mapped[datetime] = mapped_column(DateTime, server_default=func.now())
```

### Pydantic v2 Patterns
```python
# ✅ Use ConfigDict and from_attributes
class ResponseModel(BaseModel):
    model_config = ConfigDict(from_attributes=True)
    
# ✅ Use Annotated for field validation
field: Annotated[str, Field(min_length=1, max_length=100)]
```

## Project Structure Rules

### File Organization
- All domain modules go in `app/` folder
- Each module should have: `router.py`, `schemas.py`, `models.py`, `service.py`, `exceptions.py`
- Use singular table names: `purpose`, `emf`, `cost`, `hierarchy`
- Follow snake_case for files and variables, PascalCase for classes

### Database Naming Conventions
- Use `lower_case_snake` for table and column names
- Use singular form: `purpose`, `emf`, `cost`, `hierarchy`, `service_type`, `supplier`
- Use `_at` suffix for datetime fields
- Use `_date` suffix for date fields
- Use `_id` suffix for foreign keys

## Business Logic Rules

### Entity Relationships
- **Purpose** → **Hierarchy** (many-to-one, nullable)
- **Purpose** → **EMF** (one-to-many, cascade delete)
- **EMF** → **Cost** (one-to-many, cascade delete)
- **Hierarchy** → **Hierarchy** (self-referencing tree)
- **Purpose** → **ServiceType** (many-to-one)
- **Purpose** → **Supplier** (many-to-one)

### API Design Patterns
- EMF operations are integrated within Purpose routes
- Costs are managed exclusively through EMF operations
- Use nested resources: `/purposes/{id}/emfs`
- Support filtering, searching, sorting, and pagination

### Status Management
- Purpose status: `IN_PROGRESS`, `COMPLETED`
- Hierarchy types: `UNIT`, `CENTER`, `ANAF`, `TEAM`
- Currency types: `SUPPORT_USD`, `AVAILABLE_USD`, `ILS`

## Development Workflow

### Code Quality Commands (Run in Order)
```bash
isort .      # Sort imports first
black .      # Format code
flake8 .     # Lint and check quality
```

### Testing
- Write comprehensive Pytest tests for all endpoints
- Test CRUD operations, filtering, search, and pagination
- Test cascade delete operations
- Use SQLite for test database

### Database Migrations
- Use descriptive migration names: `2024-01-15_add_user_authentication.py`
- Make migrations static and revertible
- Test migrations in both directions

## Error Handling
- Use custom exceptions for domain-specific errors
- Implement proper HTTP status codes
- Provide meaningful error messages
- Handle validation errors with Pydantic

## Security Considerations
- Validate all input data with Pydantic schemas
- Use proper SQL injection prevention (SQLAlchemy ORM)
- Implement proper authentication/authorization when needed
- Sanitize user inputs

## Performance Guidelines
- Use database indexes for frequently queried fields
- Implement pagination for large datasets
- Use SQL joins for complex queries (SQL-first approach)
- Aggregate JSONs in database when possible

## Documentation
- Use Google-style docstrings
- Document all API endpoints with FastAPI decorators
- Include example request/response schemas
- Document business rules and constraints

## Deployment
- Use Docker for containerization
- Use environment variables for configuration
- Implement proper logging
- Use Gunicorn/Uvicorn for production

## Common Patterns to Follow

### Service Layer Pattern
```python
# app/purposes/service.py
class PurposeService:
    def __init__(self, db: Session):
        self.db = db
    
    def create_purpose(self, purpose_data: PurposeCreate) -> Purpose:
        # Business logic here
        pass
```

### Router Pattern
```python
# app/purposes/router.py
@router.post("/", response_model=PurposeResponse)
def create_purpose(
    purpose: PurposeCreate,
    db: Session = Depends(get_db)
) -> Purpose:
    service = PurposeService(db)
    return service.create_purpose(purpose)
```

### Schema Pattern
```python
# app/purposes/schemas.py
class PurposeCreate(BaseModel):
    hierarchy_id: Annotated[int | None, Field(default=None)]
    excepted_delivery: Annotated[date | None, Field(default=None)]
    status: StatusEnum
    # ... other fields

class PurposeResponse(PurposeCreate):
    id: int
    creation_time: datetime
    last_modified: datetime
    
    model_config = ConfigDict(from_attributes=True)
```

Remember: Always prioritize code quality, maintainability, and following the established patterns in this codebase.