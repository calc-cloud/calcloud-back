name: Release

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  # Wait for CI to complete before releasing
  wait-for-ci:
    runs-on: ubuntu-latest
    steps:
    - name: Wait for CI workflow
      uses: lewagon/wait-on-check-action@v1.3.4
      with:
        ref: ${{ github.ref }}
        check-name: 'lint_and_test'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 10

  # Build and push Docker image with release tags
  build-and-push:
    needs: wait-for-ci
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract version from tag
      id: version
      run: |
        # Extract version from tag (e.g., v1.0.0 -> 1.0.0)
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME || github.event.repository.name }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest
          type=raw,value=${{ steps.version.outputs.version_number }}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          VERSION=${{ steps.version.outputs.version_number }}
    
    - name: Export and upload Docker image tar
      run: |
        # Export Docker image as compressed tar
        docker save ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME || github.event.repository.name }}:${{ steps.version.outputs.version }} | gzip > calculaud-be-${{ steps.version.outputs.version }}.tar.gz
        
        # Upload to S3 public releases folder
        aws s3 cp calculaud-be-${{ steps.version.outputs.version }}.tar.gz s3://${{ secrets.S3_BUCKET_NAME }}/public-releases/
        
        # Make it publicly accessible
        aws s3api put-object-acl --bucket ${{ secrets.S3_BUCKET_NAME }} --key public-releases/calculaud-be-${{ steps.version.outputs.version }}.tar.gz --acl public-read
        
        # Get file size for summary
        FILE_SIZE=$(ls -lh calculaud-be-${{ steps.version.outputs.version }}.tar.gz | awk '{print $5}')
        echo "DOCKER_TAR_SIZE=$FILE_SIZE" >> $GITHUB_ENV
        echo "DOCKER_TAR_URL=https://${{ secrets.S3_BUCKET_NAME }}.s3.eu-central-1.amazonaws.com/public-releases/calculaud-be-${{ steps.version.outputs.version }}.tar.gz" >> $GITHUB_ENV
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION || 'eu-central-1' }}
    
    - name: Upload tar to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: calculaud-be-${{ steps.version.outputs.version }}.tar.gz
        tag_name: ${{ steps.version.outputs.version }}
    
    - name: Generate release summary
      run: |
        echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Docker Images Published:" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME || github.event.repository.name }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME || github.event.repository.name }}:${{ steps.version.outputs.version_number }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME || github.event.repository.name }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Docker Image Archive:" >> $GITHUB_STEP_SUMMARY
        echo "- **Size:** ${{ env.DOCKER_TAR_SIZE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Public Download:** [${{ env.DOCKER_TAR_URL }}](${{ env.DOCKER_TAR_URL }})" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Release:** Attached to this release" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Usage:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Download and load the image" >> $GITHUB_STEP_SUMMARY
        echo "curl -L ${{ env.DOCKER_TAR_URL }} | gunzip | docker load" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Or download first, then load" >> $GITHUB_STEP_SUMMARY
        echo "wget ${{ env.DOCKER_TAR_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "gunzip calculaud-be-${{ steps.version.outputs.version }}.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "docker load < calculaud-be-${{ steps.version.outputs.version }}.tar" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms:** linux/amd64" >> $GITHUB_STEP_SUMMARY